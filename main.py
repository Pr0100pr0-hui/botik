import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8264762284:AAFLaxm_3SrgcPYjdCyj1HBj7XuBx1VI4yY"
PYTHONANYWHERE_USERNAME = 'PenisJopaVazelin'
WEBHOOK_HOST = f'{PYTHONANYWHERE_USERNAME}.pythonanywhere.com'
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f'https://{WEBHOOK_HOST}{WEBHOOK_PATH}'

# –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
TEAM_ARTICLE_URL = "https://telegra.ph/Your-Team-Article-12-31"
USDT_PAYMENT_LINK = "https://cryptobot.url/your_usdt_link"
XMR_ADDRESS = "42ryGdiDRZ1JezVaCqkc8S8yjeo5JTV8xf2eivCqvqgVAeW3EfcXMaJLUZ4nJSm4KT6AwxuWjEeKgQueoXxMm7txCK5hiYi"
XMR_AMOUNT = "0.19638"
DEPOSIT_AMOUNT = "$49"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ===================== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====================
def main_menu_kb():
    return InlineKeyboardMarkup().row(
        InlineKeyboardButton("–û —Ç–∏–º–µ", callback_data="about_team"),
        InlineKeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å –≤ —Ç–∏–º—É", callback_data="join_team")
    )

def payment_methods_kb():
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π", callback_data="card_payment"),
        InlineKeyboardButton("USDT (Cryptobot)", callback_data="usdt_payment"),
        InlineKeyboardButton("XMR (Monero)", callback_data="xmr_payment"),
        InlineKeyboardButton("–ó–∞—á–µ–º –Ω—É–∂–µ–Ω –∑–∞–ª–æ–≥", callback_data="why_deposit"),
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main")
    )

def back_kb(target):
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=target)
    )

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====================
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        await message.answer_photo(
            types.InputFile('image.jpg'),
            caption=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Money Montana!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_kb()
        )
    except:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Money Montana!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_kb()
        )

@dp.callback_query_handler(lambda c: c.data == 'about_team')
async def about_team(callback: types.CallbackQuery):
    await callback.answer()
    await bot.send_message(
        callback.from_user.id,
        f"üìö –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ:\n{TEAM_ARTICLE_URL}",
        disable_web_page_preview=True
    )

@dp.callback_query_handler(lambda c: c.data == 'join_team')
async def join_team(callback: types.CallbackQuery):
    await callback.answer()
    await bot.send_message(
        callback.from_user.id,
        f"üí∞ –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Ç–∏–º—É Money Montana\n\n–î–ª—è –ø—Ä–æ—Ö–æ–¥–∞ –≤ —Ç–∏–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –∑–∞–ª–æ–≥ –≤ —Ä–∞–∑–º–µ—Ä–µ {DEPOSIT_AMOUNT}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=payment_methods_kb()
    )

@dp.callback_query_handler(lambda c: c.data == 'card_payment')
async def card_payment(callback: types.CallbackQuery):
    await callback.answer()
    await bot.send_message(
        callback.from_user.id,
        "‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        reply_markup=back_kb("back_to_payment")
    )

@dp.callback_query_handler(lambda c: c.data == 'usdt_payment')
async def usdt_payment(callback: types.CallbackQuery):
    await callback.answer()
    await bot.send_message(
        callback.from_user.id,
        f"üí∏ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ USDT:\n\n1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {USDT_PAYMENT_LINK}\n2. –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç\n3. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã",
        reply_markup=back_kb("back_to_payment")
    )

@dp.callback_query_handler(lambda c: c.data == 'xmr_payment')
async def xmr_payment(callback: types.CallbackQuery):
    await callback.answer()
    await bot.send_message(
        callback.from_user.id,
        f"üîê –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Monero:\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –°–¢–†–û–ì–û {XMR_AMOUNT} XMR –Ω–∞ –∞–¥—Ä–µ—Å:\n\n<code>{XMR_ADDRESS}</code>\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ txid —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
        parse_mode="HTML",
        reply_markup=back_kb("back_to_payment")
    )

@dp.callback_query_handler(lambda c: c.data == 'why_deposit')
async def why_deposit(callback: types.CallbackQuery):
    await callback.answer()
    await bot.send_message(
        callback.from_user.id,
        "üîí –ó–∞–ª–æ–≥ –Ω—É–∂–µ–Ω –¥–ª—è:\n\n‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–π\n‚Ä¢ –ó–∞—â–∏—Ç—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –æ—Ç –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤\n‚Ä¢ –î–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n\n–ó–∞–ª–æ–≥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ç–∏–º—ã.",
        reply_markup=back_kb("back_to_payment")
    )

@dp.callback_query_handler(lambda c: c.data.startswith('back_'))
async def back_handler(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.delete()
    
    if callback.data == 'back_to_main':
        await send_welcome(callback.message)
    elif callback.data == 'back_to_payment':
        await join_team(callback)

# ===================== WEBHOOK SETUP =====================
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Bot started. Webhook URL: {WEBHOOK_URL}")

async def handle_webhook(request):
    update = await request.json()
    update = types.Update(**update)
    await dp.process_update(update)
    return web.Response()

app = web.Application()
app.router.add_post(WEBHOOK_PATH, handle_webhook)
app.on_startup.append(on_startup)

def run_app():
    web.run_app(
        app,
        host='0.0.0.0',
        port=8080  # PythonAnywhere –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 8080
    )

if __name__ == '__main__':
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ webhook:
    # from aiogram import executor
    # executor.start_polling(dp, skip_updates=True)
    
    # –î–ª—è PythonAnywhere:
    run_app()
