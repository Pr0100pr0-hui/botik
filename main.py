import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram import F
from aiohttp import web
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ['BOT_TOKEN']
PORT = int(os.environ.get('PORT', 8000))
WEBHOOK_HOST = os.environ.get('RAILWAY_STATIC_URL', '')
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
TEAM_ARTICLE_URL = "https://telegra.ph/Your-Team-Article-12-31"
USDT_PAYMENT_LINK = "http://t.me/send?start=IVqGeFH7lnBz"
XMR_ADDRESS = "42ryGdiDRZ1JezVaCqkc8S8yjeo5JTV8xf2eivCqvqgVAeW3EfcXMaJLUZ4nJSm4KT6AwxuWjEeKgQueoXxMm7txCK5hiYi"
XMR_AMOUNT = "0.19638"
DEPOSIT_AMOUNT = "$49"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

# ===================== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====================
def main_menu_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="–û —Ç–∏–º–µ", callback_data="about_team")
    builder.button(text="–í—Å—Ç—É–ø–∏—Ç—å –≤ —Ç–∏–º—É", callback_data="join_team")
    builder.adjust(1)
    return builder.as_markup()

def payment_methods_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π", callback_data="card_payment")
    builder.button(text="USDT (Cryptobot)", callback_data="usdt_payment")
    builder.button(text="XMR (Monero)", callback_data="xmr_payment")
    builder.button(text="–ó–∞—á–µ–º –Ω—É–∂–µ–Ω –∑–∞–ª–æ–≥", callback_data="why_deposit")
    builder.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.adjust(1)
    return builder.as_markup()

def back_kb(target: str):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ù–∞–∑–∞–¥", callback_data=target)
    return builder.as_markup()

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====================
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    try:
        await message.answer_photo(
            types.FSInputFile('image.jpg'),
            caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Money Montana!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_kb()
        )
    except Exception as e:
        logger.error(f"Error sending photo: {e}")
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Money Montana!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_kb()
        )

@dp.callback_query(F.data == "about_team")
async def about_team(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        f"üìö –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ:\n{TEAM_ARTICLE_URL}",
        disable_web_page_preview=True
    )

@dp.callback_query(F.data == "join_team")
async def join_team(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        f"üí∞ –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Ç–∏–º—É Money Montana\n\n–î–ª—è –ø—Ä–æ—Ö–æ–¥–∞ –≤ —Ç–∏–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –∑–∞–ª–æ–≥ –≤ —Ä–∞–∑–º–µ—Ä–µ {DEPOSIT_AMOUNT}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=payment_methods_kb()
    )

@dp.callback_query(F.data == "card_payment")
async def card_payment(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        reply_markup=back_kb("back_to_payment")
    )

@dp.callback_query(F.data == "usdt_payment")
async def usdt_payment(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        f"üí∏ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ USDT:\n\n1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {USDT_PAYMENT_LINK}\n2. –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç\n3. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã",
        reply_markup=back_kb("back_to_payment")
    )

@dp.callback_query(F.data == "xmr_payment")
async def xmr_payment(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        f"üîê –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Monero:\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –°–¢–†–û–ì–û {XMR_AMOUNT} XMR –Ω–∞ –∞–¥—Ä–µ—Å:\n\n<code>{XMR_ADDRESS}</code>\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ txid —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
        parse_mode="HTML",
        reply_markup=back_kb("back_to_payment")
    )

@dp.callback_query(F.data == "why_deposit")
async def why_deposit(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "üîí –ó–∞–ª–æ–≥ –Ω—É–∂–µ–Ω –¥–ª—è:\n\n‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–π\n‚Ä¢ –ó–∞—â–∏—Ç—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –æ—Ç –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤\n‚Ä¢ –î–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n\n–ó–∞–ª–æ–≥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ç–∏–º—ã.",
        reply_markup=back_kb("back_to_payment")
    )

@dp.callback_query(F.data.startswith("back_"))
async def back_handler(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.delete()
    
    if callback.data == 'back_to_main':
        await send_welcome(callback.message)
    elif callback.data == 'back_to_payment':
        await join_team(callback)

# ===================== WEBHOOK –ù–ê–°–¢–†–û–ô–ö–ê =====================
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Bot started at {WEBHOOK_URL}")

app = web.Application()
app.on_startup.append(on_startup)
app.router.add_post(WEBHOOK_PATH, lambda r: web.Response())

async def start_webhook():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(start_webhook())
